//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""dungeon"",
            ""id"": ""1cdfb49a-de7d-4c10-b115-951d6f5e19cc"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""ad9095d0-af51-47ca-9aa6-1cce362e41f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""esc"",
                    ""type"": ""Button"",
                    ""id"": ""5ce9ad6e-c150-4684-a40a-90d1e8dd9624"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""wasd"",
                    ""id"": ""14f34d9f-e061-4e74-9a53-f141db060686"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9063bd2b-71b4-4b29-bf88-18ab0acd791c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1c62ea8a-e3cc-4965-a493-62ad7ae54d7d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""32c848b1-4352-40cc-a527-a8fe9c4cf638"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d88404fb-c273-4c33-a7ca-08f8de7ea26d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c6facb9a-6c0c-4e15-aa50-c538b962a767"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // dungeon
        m_dungeon = asset.FindActionMap("dungeon", throwIfNotFound: true);
        m_dungeon_move = m_dungeon.FindAction("move", throwIfNotFound: true);
        m_dungeon_esc = m_dungeon.FindAction("esc", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // dungeon
    private readonly InputActionMap m_dungeon;
    private List<IDungeonActions> m_DungeonActionsCallbackInterfaces = new List<IDungeonActions>();
    private readonly InputAction m_dungeon_move;
    private readonly InputAction m_dungeon_esc;
    public struct DungeonActions
    {
        private @Controls m_Wrapper;
        public DungeonActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_dungeon_move;
        public InputAction @esc => m_Wrapper.m_dungeon_esc;
        public InputActionMap Get() { return m_Wrapper.m_dungeon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DungeonActions set) { return set.Get(); }
        public void AddCallbacks(IDungeonActions instance)
        {
            if (instance == null || m_Wrapper.m_DungeonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DungeonActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @esc.started += instance.OnEsc;
            @esc.performed += instance.OnEsc;
            @esc.canceled += instance.OnEsc;
        }

        private void UnregisterCallbacks(IDungeonActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @esc.started -= instance.OnEsc;
            @esc.performed -= instance.OnEsc;
            @esc.canceled -= instance.OnEsc;
        }

        public void RemoveCallbacks(IDungeonActions instance)
        {
            if (m_Wrapper.m_DungeonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDungeonActions instance)
        {
            foreach (var item in m_Wrapper.m_DungeonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DungeonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DungeonActions @dungeon => new DungeonActions(this);
    public interface IDungeonActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
    }
}
